<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ForbiddenPublicDataClass:Auth.kt:Credential</ID>
    <ID>ForbiddenPublicDataClass:Auth.kt:TokenResponse</ID>
    <ID>ForbiddenPublicDataClass:DataClasses.kt:CatalogResponse</ID>
    <ID>ForbiddenPublicDataClass:DataClasses.kt:Descriptor</ID>
    <ID>ForbiddenPublicDataClass:DataClasses.kt:Index : Versioned</ID>
    <ID>ForbiddenPublicDataClass:DataClasses.kt:LayoutMarker</ID>
    <ID>ForbiddenPublicDataClass:DataClasses.kt:Manifest : Versioned</ID>
    <ID>ForbiddenPublicDataClass:DataClasses.kt:Platform</ID>
    <ID>ForbiddenPublicDataClass:DataClasses.kt:TagsResponse</ID>
    <ID>ForbiddenPublicDataClass:DataClasses.kt:UploadStatus</ID>
    <ID>ForbiddenPublicDataClass:Errors.kt:ActionableFailure</ID>
    <ID>ForbiddenPublicDataClass:Errors.kt:FailureResponse</ID>
    <ID>ForbiddenPublicDataClass:Reference.kt:Reference</ID>
    <ID>ForbiddenPublicDataClass:ReferenceTest.kt:ReferenceTest$Invalid</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Annotations.kt:/** * Annotations is a simple map of strings. * * [Pre-defined annotations * keys](https://github.com/opencontainers/image-spec/blob/main/annotations.md#pre-defined-annotation-keys) */ typealias Annotations = Map&lt;String, String&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Auth.kt:Credential</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Auth.kt:OCIAuthPluginConfig</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DataClasses.kt:CatalogResponse</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DataClasses.kt:Descriptor</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DataClasses.kt:Index : Versioned</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DataClasses.kt:LayoutMarker</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DataClasses.kt:Manifest : Versioned</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DataClasses.kt:Platform</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DataClasses.kt:TagsResponse</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DataClasses.kt:UploadStatus</ID>
    <ID>LibraryEntitiesShouldNotBePublic:DataClasses.kt:Versioned</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Digest.kt:Digest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Digest.kt:RegisteredAlgorithm</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Errors.kt:ActionableFailure</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Errors.kt:ErrorCode</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Errors.kt:FailureResponse</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Errors.kt:OCIException : Exception</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Layout.kt:Layout</ID>
    <ID>LibraryEntitiesShouldNotBePublic:LayoutTest.kt:LayoutTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Reference.kt:Reference</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ReferenceTest.kt:ReferenceTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Registry.kt:Registry</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Registry.kt:fun Registry.pull( repository: String, tag: String, storage: Layout, platformResolver: ((Platform) -&gt; Boolean)? = null, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Registry.kt:fun Registry.repo(name: String)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Registry.kt:suspend fun Registry.resolve( repository: String, tag: String, platformResolver: ((Platform) -&gt; Boolean)? = null, )</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Registry.kt:suspend fun Registry.tags(repository: String)</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RegistryTest.kt:RegistryTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RegistryTest.kt:fun generateRandomFile(filePath: String, sizeInBytes: Int): Descriptor</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Repository.kt:Repository</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Repository.kt:fun Headers.toUploadStatus(): UploadStatus</ID>
    <ID>LibraryEntitiesShouldNotBePublic:RouteTest.kt:RouteTest</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Router.kt:Router</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Scopes.kt:@Suppress( "detekt:LongMethod", "detekt:CyclomaticComplexMethod", "detekt:NestedBlockDepth", "detekt:ReturnCount", "detekt:LoopWithTooManyJumpStatements", ) fun cleanScopes(scopes: List&lt;String&gt;): List&lt;String&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Scopes.kt:fun cleanActions(actions: List&lt;String&gt;): List&lt;String&gt;</ID>
    <ID>LibraryEntitiesShouldNotBePublic:Scopes.kt:fun scopeRepository(repo: String, vararg actions: String): String</ID>
    <ID>LibraryEntitiesShouldNotBePublic:ScopesTest.kt:ScopesTest</ID>
    <ID>MagicNumber:DataClasses.kt:Descriptor.Companion$1024</ID>
    <ID>MagicNumber:Digest.kt:Digest$128</ID>
    <ID>MagicNumber:Digest.kt:Digest$64</ID>
    <ID>MagicNumber:Errors.kt:400</ID>
    <ID>MagicNumber:Errors.kt:499</ID>
    <ID>MagicNumber:Layout.kt:Layout$1024</ID>
    <ID>MagicNumber:Layout.kt:Layout$32</ID>
    <ID>MagicNumber:Layout.kt:Layout$4</ID>
    <ID>MagicNumber:Repository.kt:Repository$100</ID>
    <ID>MagicNumber:Repository.kt:Repository$100.0</ID>
    <ID>MagicNumber:Repository.kt:Repository$1024</ID>
    <ID>MagicNumber:Repository.kt:Repository$5</ID>
    <ID>WildcardImport:Auth.kt:import io.ktor.client.*</ID>
    <ID>WildcardImport:Auth.kt:import io.ktor.client.call.*</ID>
    <ID>WildcardImport:Auth.kt:import io.ktor.client.plugins.api.*</ID>
    <ID>WildcardImport:Auth.kt:import io.ktor.client.request.*</ID>
    <ID>WildcardImport:Auth.kt:import io.ktor.client.request.forms.*</ID>
    <ID>WildcardImport:Auth.kt:import io.ktor.http.*</ID>
    <ID>WildcardImport:Auth.kt:import io.ktor.http.auth.*</ID>
    <ID>WildcardImport:Errors.kt:import io.ktor.client.call.*</ID>
    <ID>WildcardImport:Errors.kt:import io.ktor.client.statement.*</ID>
    <ID>WildcardImport:Errors.kt:import io.ktor.http.*</ID>
    <ID>WildcardImport:Layout.kt:import io.ktor.utils.io.*</ID>
    <ID>WildcardImport:LayoutTest.kt:import io.ktor.utils.io.jvm.javaio.*</ID>
    <ID>WildcardImport:LayoutTest.kt:import org.junit.jupiter.api.Assertions.*</ID>
    <ID>WildcardImport:Reference.kt:import io.ktor.http.*</ID>
    <ID>WildcardImport:ReferenceTest.kt:import io.ktor.http.*</ID>
    <ID>WildcardImport:ReferenceTest.kt:import kotlin.test.*</ID>
    <ID>WildcardImport:Registry.kt:import io.ktor.client.*</ID>
    <ID>WildcardImport:Registry.kt:import io.ktor.client.call.*</ID>
    <ID>WildcardImport:Registry.kt:import io.ktor.client.engine.cio.*</ID>
    <ID>WildcardImport:Registry.kt:import io.ktor.client.plugins.*</ID>
    <ID>WildcardImport:Registry.kt:import io.ktor.client.request.*</ID>
    <ID>WildcardImport:Registry.kt:import io.ktor.http.*</ID>
    <ID>WildcardImport:Registry.kt:import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:RegistryTest.kt:import io.ktor.client.*</ID>
    <ID>WildcardImport:RegistryTest.kt:import io.ktor.client.engine.cio.*</ID>
    <ID>WildcardImport:RegistryTest.kt:import io.ktor.client.plugins.*</ID>
    <ID>WildcardImport:RegistryTest.kt:import kotlin.test.*</ID>
    <ID>WildcardImport:RegistryTest.kt:import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:RegistryTest.kt:import org.junit.jupiter.api.*</ID>
    <ID>WildcardImport:Repository.kt:import io.ktor.client.*</ID>
    <ID>WildcardImport:Repository.kt:import io.ktor.client.call.*</ID>
    <ID>WildcardImport:Repository.kt:import io.ktor.client.plugins.*</ID>
    <ID>WildcardImport:Repository.kt:import io.ktor.client.request.*</ID>
    <ID>WildcardImport:Repository.kt:import io.ktor.http.*</ID>
    <ID>WildcardImport:Repository.kt:import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:Repository.kt:import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:RouteTest.kt:import io.ktor.http.*</ID>
    <ID>WildcardImport:Router.kt:import io.ktor.http.*</ID>
    <ID>WildcardImport:Scopes.kt:import io.ktor.util.*</ID>
  </CurrentIssues>
</SmellBaseline>
